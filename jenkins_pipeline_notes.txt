Pipelines are a suite of plugins enabling the integration of continuous delivery into jenkins
Jenkins 2.x or above, pipeline plugin required

Continuous delivery pipeline is an automated expression of the delivery process of the software from dev to cust written into a file "Jenkinsfile" which
can be versioned & reviewed like any other code. Hence pipeline-as-a-code.

Two ways of scripting a Jenkinsfile,
- Declarative,
-- which is a more readable/writeable/newer format to make the scripting easier
-- sections :
  agent, specifies the node to be used for the build
  post, specifies a list of post build actions to be performed, sort of a try catch
  stages, collection of stages of the build
  steps, collection of the steps to be executed in each stage
-- directives :
  environment, describes the build environment by setting the environment variables
  options, such as build timeouts, etc
  input, specifies input to the builds in the form of parameters
  parameters, parameterized builds
  triggers, type of build trigger
  stage, individual build stage
  tools, tools to be used for the build. these tools should be preconfigured in the Global tool config of Manage Jenkins
  when, specifies the condition in which the the following pipeline script block should be executed
-- Sequential stages :
  stages within stages, nested stages
-- Parallel:
  used to execute stages in parallel on different nodes
-- script:
  used to execute a groovy script in the build steps

################################################ Basic sample declarative pipeline,  advanced syntax @ https://jenkins.io/doc/book/pipeline/syntax/
pipeline{
# this is the main key word in a declarative pipeline
  agent any
# agent directive telling which node to use
  stages{
# array defining the stages of the Pipeline
    environment {
# this directive defines the user-defined environment variables, scope is limited to teh block it is declared in
      test_variable="test"
    }
    input{
# input directive defining the input
    Message "This input is needed to proceed with the build"
    ok "Select"
    parameters{
# this directive defines the parameters if the build is a parameterized one, the build stops at this stage to accept the input parameters
      booleanParam
        defaultValue: true,
        description: 'is it a pipeline',
        name: 'pipes'
    }
    }
    stage {
# defines the individual stage of the application
      steps{
# defines the steps in the stage, like make build, generate product, etc. there are keywords for each plugin explained in detail @ https://jenkins.io/doc/pipeline/steps/
        echo Hello
        echo "${env.BUILD_ID}"
# global variable reference @ http://ec2-54-213-229-220.us-west-2.compute.amazonaws.com:8080//pipeline-syntax/globals#env
      }
    }

  }
}
#####################################################

Now we will work on the Multibranch pipeline

-- Create a project for the Multibranch Pipeline & point the git source to your repository
-- Create multiple branches in the git repository
-- it will scan all the features in the branch and create the build jobs for each of them based on the pipeline script
-- as and when the features are deleted, the jobs get deleted as well